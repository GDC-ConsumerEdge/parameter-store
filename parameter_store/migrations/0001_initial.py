# Generated by Django 5.1.4 on 2024-12-10 22:10

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClusterDataField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Cluster Custom Data Field',
                'verbose_name_plural': 'Cluster Custom Data Fields',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='tag name')),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Validator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('validator', models.CharField(choices=[('parameter_store.validation.IPAddressValidator', 'IPAddressValidator'), ('parameter_store.validation.IPv4AddressWithCIDR', 'IPv4AddressWithCIDR'), ('parameter_store.validation.EmailAddressValidator', 'EmailAddressValidator'), ('parameter_store.validation.CommaSeparatedEmailsValidator', 'CommaSeparatedEmailsValidator'), ('parameter_store.validation.StringRegexValidator', 'StringRegexValidator'), ('parameter_store.validation.StringLengthValidator', 'StringLengthValidator'), ('parameter_store.validation.IntegerRangeValidator', 'IntegerRangeValidator'), ('parameter_store.validation.IntegerValueValidator', 'IntegerValueValidator'), ('parameter_store.validation.EnumValidator', 'EnumValidator'), ('parameter_store.validation.ExactValueValidator', 'ExactValueValidator')], max_length=255)),
                ('parameters', models.JSONField(blank=True, default=dict, help_text='Enter parameters for the validator in JSON format. Due to limitations in the UI, arguments for validators cannot be displayed dynamically. Contents of this field will be validated and feedback will be provided on the contents of this field.')),
            ],
        ),
        migrations.CreateModel(
            name='ClusterIntent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zone_name', models.CharField(blank=True, help_text=None, max_length=100, null=True)),
                ('location', models.CharField(help_text=None, max_length=30)),
                ('machine_project_id', models.CharField(help_text=None, max_length=30, verbose_name='Machine Project ID')),
                ('fleet_project_id', models.CharField(help_text=None, max_length=30, verbose_name='Fleet Project ID')),
                ('secrets_project_id', models.CharField(help_text=None, max_length=30)),
                ('node_count', models.IntegerField(default=3, help_text=None)),
                ('cluster_ipv4_cidr', models.CharField(help_text=None, max_length=18, verbose_name='Cluster IPv4 CIDR')),
                ('services_ipv4_cidr', models.CharField(help_text=None, max_length=18, verbose_name='Services IPv4 CIDR')),
                ('external_load_balancer_ipv4_address_pools', models.CharField(help_text=None, max_length=180, verbose_name='External Load Balancer IPv4 Address Pools')),
                ('sync_repo', models.CharField(help_text='This is the full URL to a Git repository', max_length=128)),
                ('sync_branch', models.CharField(default='main', help_text='For; example: "main" or "master"', max_length=50)),
                ('sync_dir', models.CharField(default='hydrated/clusters/None', help_text=None, max_length=50)),
                ('git_token_secret_manager_name', models.CharField(help_text=None, max_length=255)),
                ('cluster_version', models.CharField(help_text='This is the GDCC control plane version, i.e. "1.7.1"', max_length=30)),
                ('maintenance_window_start', models.DateTimeField(blank=True, help_text=None, null=True)),
                ('maintenance_window_end', models.DateTimeField(blank=True, help_text=None, null=True)),
                ('maintenance_window_recurrence', models.CharField(blank=True, help_text=None, max_length=128, null=True)),
                ('subnet_vlans', models.CharField(help_text=None, max_length=128, null=True)),
                ('recreate_on_delete', models.BooleanField(default=False)),
                ('cluster', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='parameter_store.cluster')),
            ],
            options={
                'verbose_name': 'Cluster Intent',
                'verbose_name_plural': 'Cluster Intent',
            },
        ),
        migrations.AddField(
            model_name='cluster',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='parameter_store.group'),
        ),
        migrations.CreateModel(
            name='ClusterTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parameter_store.cluster')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parameter_store.tag')),
            ],
            options={
                'verbose_name': 'Cluster Tag',
                'verbose_name_plural': 'Cluster Tags',
            },
        ),
        migrations.AddField(
            model_name='cluster',
            name='tags',
            field=models.ManyToManyField(related_name='clusters', through='parameter_store.ClusterTag', to='parameter_store.tag'),
        ),
        migrations.CreateModel(
            name='ClusterData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=1024, null=True)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parameter_store.cluster')),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parameter_store.clusterdatafield')),
            ],
            options={
                'verbose_name': 'Cluster Custom Data',
                'verbose_name_plural': 'Cluster Custom Data',
                'constraints': [models.UniqueConstraint(fields=('cluster', 'field'), name='unique_cluster_field')],
            },
        ),
        migrations.CreateModel(
            name='ClusterFleetLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=63)),
                ('value', models.CharField(max_length=63)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parameter_store.cluster')),
            ],
            options={
                'verbose_name': 'Cluster Fleet Label',
                'verbose_name_plural': 'Cluster Fleet Labels',
                'constraints': [models.UniqueConstraint(fields=('cluster', 'key'), name='unique_cluster_key')],
            },
        ),
        migrations.CreateModel(
            name='ClusterDataFieldValidatorAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='parameter_store.clusterdatafield')),
                ('validator', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='parameter_store.validator')),
            ],
            options={
                'verbose_name': 'Custom Data Validator Assignment',
                'verbose_name_plural': 'Custom Data Validator Assignments',
                'constraints': [models.UniqueConstraint(fields=('field', 'validator'), name='unique_field_validator')],
            },
        ),
        migrations.CreateModel(
            name='ValidatorAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(choices=[('parameter_store.models.Group', 'Group'), ('parameter_store.models.Cluster', 'Cluster'), ('parameter_store.models.Tag', 'Tag'), ('parameter_store.models.ClusterTag', 'ClusterTag'), ('parameter_store.models.ClusterIntent', 'ClusterIntent'), ('parameter_store.models.ClusterFleetLabel', 'ClusterFleetLabel')], help_text='Model to apply validator', max_length=255)),
                ('model_field', models.CharField(choices=[('name', 'Group.name'), ('description', 'Group.description'), ('name', 'Cluster.name'), ('description', 'Cluster.description'), ('group', 'Cluster.group'), ('name', 'Tag.name'), ('description', 'Tag.description'), ('cluster', 'ClusterTag.cluster'), ('tag', 'ClusterTag.tag'), ('cluster', 'ClusterIntent.cluster'), ('zone_name', 'ClusterIntent.zone_name'), ('location', 'ClusterIntent.location'), ('machine_project_id', 'ClusterIntent.machine_project_id'), ('fleet_project_id', 'ClusterIntent.fleet_project_id'), ('secrets_project_id', 'ClusterIntent.secrets_project_id'), ('node_count', 'ClusterIntent.node_count'), ('cluster_ipv4_cidr', 'ClusterIntent.cluster_ipv4_cidr'), ('services_ipv4_cidr', 'ClusterIntent.services_ipv4_cidr'), ('external_load_balancer_ipv4_address_pools', 'ClusterIntent.external_load_balancer_ipv4_address_pools'), ('sync_repo', 'ClusterIntent.sync_repo'), ('sync_branch', 'ClusterIntent.sync_branch'), ('sync_dir', 'ClusterIntent.sync_dir'), ('git_token_secret_manager_name', 'ClusterIntent.git_token_secret_manager_name'), ('cluster_version', 'ClusterIntent.cluster_version'), ('maintenance_window_start', 'ClusterIntent.maintenance_window_start'), ('maintenance_window_end', 'ClusterIntent.maintenance_window_end'), ('maintenance_window_recurrence', 'ClusterIntent.maintenance_window_recurrence'), ('subnet_vlans', 'ClusterIntent.subnet_vlans'), ('recreate_on_delete', 'ClusterIntent.recreate_on_delete'), ('cluster', 'ClusterFleetLabel.cluster'), ('key', 'ClusterFleetLabel.key'), ('value', 'ClusterFleetLabel.value')], help_text='Select model and its field', max_length=255)),
                ('validator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parameter_store.validator')),
            ],
            options={
                'verbose_name': 'Standard Validator Assignment',
                'verbose_name_plural': 'Standard Validator Assignments',
                'constraints': [models.UniqueConstraint(fields=('model', 'model_field', 'validator'), name='unique_model_field_validator')],
            },
        ),
    ]
